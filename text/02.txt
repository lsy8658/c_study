학습 목차 )

1. 자료형과 상수
2. 변수
3. 선행처리기

자료형(data type)이란?

- 값의 종류에 따른 표현 방법  -> 각 자료형에 해당되는 2진수 표현 방법을 사용함
- 값을 표현하기 위한 메모리 공간
- 값을 대상으로 수행할 수 있는 연산

값을 저장하거나 계산을 할 때 자료형을 엄격하게 구분하여 처리함

C 언어 자료형의 종류 )
정수형 -> short int, int, long int, long long int => signed 또는 unsigned
문자형 -> char => signed 또는 unsigned
실수형 -> float, double, long double

열거형 (enumerated type)

파생형 (derived types) )
배열형 (array type), 구조체형 (structure type),
공용체형 (union type), 포인터형 (pointer type)

============================================================

문자형과 정수형 )

& 정수 형태의 값을 표현
& signed형과 unsigned형으로 표현할 수 있음
- signed가 디폴트임

& 값을 저장하기 위한 메모리의 크기
sizeof(char) <= sizeof(short) <= sizeof(int)
<= sizeof(long) <= sizeof(long long)

& 메모리의 크기가 확정되어 있지는 않으며 C언어를 구현하는 
컴퓨터에서 가장 효율적으로 처리할 수 있는 정수형을 int형으로 표현함

============================================================

& 정수형

char 1byte / -128 ~ 127
short int 2byte / -32768 ~ 32767
int 4byte / -21억정도 ~ 21억
long int 4byte / -21억정도 ~ 21억
long long int 8byte / 너무 많음 범위가

앞에 unsigned 가 붙으면 0부터 양의 정수

============================================================

& <limit.h>에 정의된 값으로 확인할 수 있음 ( INT_MIN, INT_MAX )
& <float.h>에 정의된 값으로 확인할 수 있음 ( DBL_MIN, DBL_MAX )

printf : 출력

printf("'%c'", 'A') // A
printf("'%d'", 'A') // 65

============================================================

& 실수형 
float 4byte
double 8byte
long double 8byte

============================================================

& 열거형 ( enumeration type) 이란 ?
-> 나열된 단어를 값으로 사용하는 자료형
- 나열된 순서대로 0부터 시작하는 정수를 표현

enum day {SUN, MON, TUE, WED, THU, FRI, SAT}
            0    1    2   3    4    5   6

============================================================

상수(constant) : 항상 고정된 값을 갖는 자료

& 정수형 상수
10 진수 / 10, -45, 999 / 0 ~ 9 범위의 숫자를 사용함, 숫자의 첫 자리는 0이 아니어야 함
8진수 / 012, -055 / 0 ~ 7 범위의 숫자를 사용함  숫자의 첫 자리는 0으로 시작함
16진수 / 0x0c, -0x2D / 0~9, a~f 를 사용함 숫자의 첫 자리는  0x로 시작함
unsigned형 / 10u, 012u, 0X0CU / u: 부호 없는 상수를 표현하는 접미사
long형 / 123451, 0XFFL / l: long 형의 상수를 표현하는 접미사

============================================================
부동소수점 형 상수

double형이 기본 자료형임
소수형식 3.14, -12.345
지수형식 1.2e3, 5e-2 / 10진수와 e를 사용하여 표현
float형 3.14f, 0.314E1F / f:float형을 표현하는 접미사
long double형 3.14l, 0.314E1L / l:long double형을 표현하는 접미사

============================================================

내부적으로는 해당문자의 ASCll 코드값 저장

============================================================

&Escape문자

'\a' 경고음(alarm)출력
'\b' 백 스페이스
'\f' 새 페이지
'\n' 줄 바꿈
'\r' 행의 시작 위치로 이동
'\t' 수평 탭
'\0' null 문자

'\', '\"' -> 작은 따옴표, 큰 따옴표
'\\' \  -> 백슬래시

\8진수코드 또는  \x16진수코드
-> 문자 'A'의 표현  '\101' '\x41'

============================================================

& 문자열 상수
큰따옴표로 묶여 있는 일련의 문자는

문자열의 끝을 나태내기 위한 널 문자 ('\0')

============================================================

& 변수

- 프로그램에서 값을 저장하기 위한 기억공간
- 모든 변수는 사용전 미리 선언헤애힘

& 변수의 선언

자료형 변수명;
자료형 변수명1, 변수명2;

& 변수의 선언 시 고려할 사항

- 변수에 저장될 값의 크기
- 변수의 선언 위치
- 변수의 초기화

& 변수에 저장될 값의 크기에 따라 발생할 수 있는 문제
- 오버플로, 언더플로 ( 표현할 수 있는 값의 범위를 벗어나는 문제)

ex ) short int 2byte / -32768 ~ 32767

short int num1, num2;
num1 = 32767 + 1;
num2 = 32767 - 1;

값의 범위를 벗어나서 값이 이상하게 출력되는 현상

============================================================

선행처리 (preprocessing)란 ?

- 컴파일에 앞서 소스 프로그램을 가공하여 컴파일러가
실제로 번역할 소스 프로그램을 만드는 것

=> #include <파일명> / 표준 디렉토리에서 파일을 찾음
=> #include "파일명" / 현재 사용 중인 디렉토리, 또는 직접 지정한 경로에서 파일을 찾음
#include "sub/b.h" -> sub라는 폴더안에 b.h를 가져와라


컴파일하기 앞서 선언한다고해서 선행처리라고 한다.

& 대표적인 선행처리
- 헤더파일 포함 : #include
- 매크로 선언 및 해제 : #define, #undef
- 조건부 컴파일: #if, #else, #elif, #endif

* 선행처리 지시어는 '#'로 시작함
* 문장의 끝에 ';'을 사용하지 않음


============================================================

매크로 정의 )
& 매크로란(macro) ?
- 특정 코드 패턴으로 치환되도록 정의된 명칭
- #define을 사용하여 자주 사용되는 명령이나 수식 또는 상수에 이를 대표하는
이름(매크로 이름)을 붙여 사용

& 매크로의 유형
- 매크로 상수
- 매크로 함수

* 매크로 상수
형식 #define 매크로명 값 
=> 매크로 확장 : 프로그램 내의 '매크로명'을 값으로 치환함

#define PI 3.141592
=> 이후에 나오는 'PI'는 3.141592로 치환함

* 매크로 상수 해제
형식 #undef 매크로명


* 매크로 함수
형식 #define 매크로명(인수리스트) (수식) 
=> 인수리스트 1개 이상의 인수 
=> 매크로 확장 : 인수를 수식에 반영하여 매크로명을 치환함
=> 주의 : 매크로명이 수식의 텍스트로 치환되는 것이므로 적절히
괄호를 사용할 필요가 있음

#define C_AREA(x) (3.141592 * (x) * (x))


============================================================

조건부 컴파일 )
- 조건에 따라 컴파일할 코드를 선택할 수 있게 하는 것

형식 

#if 조건문
    문장
#endif

조건문이 참인 경우 컴파일될 소스코드에 '문장'이 포함됨

주의
- 조건문은 선행처리과정에서 진위 여부를 판단할 수 있어야 함
- 변수 지정이나 함수 호출 불가

#endif ? 이건 처음봄;;

#include <stdio.h>
#define DEBUG_MODE 1

int main () {
    int a = 10, b = 20;
    #if DEBUG_MODE
        printf("평균을 구할 값: %d, %d\n, a, b);
    #endif
        printf("평균 = %f\n", (a + b)/2.0);
}